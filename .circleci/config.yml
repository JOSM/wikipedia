version: 2
jobs:
  test-java-9:
    docker:
      - image: circleci/openjdk:9-jdk-browsers
    steps:
      - restore_cache: &restore_gradleGit_cache
          keys:
            - gradleGit-v1-{{ .Branch }}-{{ .Revision }}
            - gradleGit-v1-{{ .Branch }}-
            - gradleGit-v1-
      - run: sudo apt install -y gettext
      # Temporary workaround for https://discuss.circleci.com/t/22437
      - run: |
          if [ -n "$CIRCLE_TAG" ]
          then
            mkdir -p ~/.ssh
            echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
            ' >> ~/.ssh/known_hosts
            git fetch --force origin "refs/tags/${CIRCLE_TAG}:refs/tags/${CIRCLE_TAG}"
          fi
      - checkout
      - run: ./gradlew assemble test
      - store_test_results:
          path: ./build/test-results/test
      - save_cache: &save_gradleGit_cache
          key: gradleGit-v1-{{ .Branch }}-{{ .Revision }}
          paths:
            - "~/.gradle/caches"
            - "~/.gradle/wrapper"
            - ".git"
            - ".gradle"

  test-java-8:
    docker: &jdk8_image
      - image: circleci/openjdk:8-jdk-browsers
    steps:
      - restore_cache: *restore_gradleGit_cache
      - run: sudo apt install -y gettext
      # Temporary workaround for https://discuss.circleci.com/t/22437
      - run: |
          if [ -n "$CIRCLE_TAG" ]
          then
            mkdir -p ~/.ssh
            echo 'github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
            ' >> ~/.ssh/known_hosts
            git fetch --force origin "refs/tags/${CIRCLE_TAG}:refs/tags/${CIRCLE_TAG}"
          fi
      - checkout
      # Main commands
      - run: ./gradlew assemble test generatePot generateMasterPluginList
      # Storing to cache/workspace
      - persist_to_workspace: &persist_build_artifacts
          root: .
          paths:
            - .tx
            - build
      - save_cache: *save_gradleGit_cache
      - store_artifacts:
          path: ./build/dist
          destination: dist
      - store_artifacts:
          path: ./build/tmp/jar/MANIFEST.MF
          destination: dist/MANIFEST.MF
      - run: |
          git fetch origin gh-pages
          git checkout gh-pages
          cp ./build/pluginMasterSnapshots .
          git stage pluginMasterSnapshots
          git config user.name "CircleCI $CIRCLE_BUILD_NUM"
          git config user.email "deploy@circleci"
          git commit -m "[ci skip] Update plugin update site for JOSM with latest version from master branch"
          git push -q https://${GITHUB_TOKEN}@github.com/JOSM/wikipedia.git gh-pages > /dev/null 2>&1

  min-josm:
    docker: *jdk8_image
    steps:
      - restore_cache: *restore_gradleGit_cache
      - checkout
      # Attach build artifacts
      - attach_workspace:
          at: .
      # Main commands
      - run: ./gradlew minJosmVersionClasses

  check:
    docker: *jdk8_image
    steps:
      - restore_cache: *restore_gradleGit_cache
      - run: sudo apt install -y gettext
      - checkout
      # Attach build artifacts
      - attach_workspace:
          at: .
      # Main commands
      - run: ./gradlew check
      # Storing to workspace
      - persist_to_workspace: *persist_build_artifacts

  transifex-upload:
    docker:
      - image: circleci/python:3.6-node-browsers
    steps:
      - attach_workspace:
          at: .
      - run: pip install --user git+https://github.com/transifex/transifex-client.git@699dd42e04074be92a07b5b87e8f1ea672a6571f#egg=transifex-client
      - run: export PATH="$PATH:$HOME/.local/bin" && pip install --user codecov && codecov
      - run: |
          export PATH="$PATH:$HOME/.local/bin" && echo "$PATH"
          if [ ! -z "$TRANSIFEX_TOKEN" ]; then
            TX_TOKEN="$TRANSIFEX_TOKEN" tx push -s --no-interactive
          fi
      # Store artifacts
      - store_test_results:
          path: ./build/test-results/test
      - store_artifacts:
          path: ./build/reports/jacoco/test
          destination: jacoco
      - store_artifacts:
          path: ./build/reports/pmd
          destination: pmd
      - store_artifacts:
          path: ./build/reports/tests/test
          destination: junit

  publish-release:
    docker:
      - image: circleci/golang:1.10
    steps:
      - restore_cache: *restore_gradleGit_cache
      - checkout
      - attach_workspace:
          at: .
      - run: go get github.com/aktau/github-release
      - run: |
          export TAG_SUBJECT=`git tag -l --format="%(contents:subject)" $CIRCLE_TAG`
          export TAG_BODY=`git tag -l --format="%(contents:body)" $CIRCLE_TAG`
          export GITHUB_USER="$CIRCLE_PROJECT_USERNAME"
          export GITHUB_REPO="$CIRCLE_PROJECT_REPONAME"
          github-release release --tag "$CIRCLE_TAG" --name "$TAG_SUBJECT" --description "$TAG_BODY"
          github-release upload --tag "$CIRCLE_TAG" --file "./build/dist/wikipedia.jar" --name "wikipedia.jar"
          github-release upload --tag "$CIRCLE_TAG" --file "./build/tmp/jar/MANIFEST.MF" --name "MANIFEST.MF"

workflows:
  version: 2
  build-workflow:
    jobs:
      - test-java-8:
          filters: &always_run
            tags:
              only: /.*/
      - test-java-9:
          filters: *always_run

      - check: &depends_on_test_tasks
          requires:
            - test-java-8
            - test-java-9
          filters: *always_run
      - min-josm: *depends_on_test_tasks

      # Runs only on master branch
      - transifex-upload:
          requires:
            - check
            - min-josm
          filters:
            branches:
              only: master
      # Runs only on tags matching /v[0-9].*/
      - publish-release:
          requires:
            - check
            - min-josm
          filters:
            tags:
              only: /v[0-9].*/
            branches:
              ignore: /.*/
