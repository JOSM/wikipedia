import java.nio.file.Files
import java.nio.file.Paths
import java.time.Duration
import java.time.Instant
import java.util.jar.JarInputStream
import java.util.regex.Pattern
import java.util.stream.Collectors
import org.openstreetmap.josm.gradle.plugin.task.GeneratePluginList
import com.github.spotbugs.SpotBugsTask

plugins {
  id "java"
  id "eclipse"
  id "jacoco"
  id "pmd"
  id "com.github.ben-manes.versions" version "0.20.0"
  id "com.github.spotbugs" version "1.6.2"
  id "net.ltgt.errorprone" version "0.0.14"
  id "org.openstreetmap.josm" version "0.5.0"
}
def versions = [
    errorprone: "2.3.1",
    jacoco: "0.8.1",
    junit: "5.2.0",
    pmd: "6.3.0",
    spotbugs: "3.1.5",
]

repositories {
  jcenter()
}
dependencies {
  packIntoJar("com.fasterxml.jackson.core:jackson-databind:2.9.5")
  errorprone("com.google.errorprone:error_prone_core:${versions.errorprone}")
  testImplementation("org.junit.jupiter:junit-jupiter-api:${versions.junit}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${versions.junit}")
  testImplementation("org.junit.vintage:junit-vintage-engine:${versions.junit}")
  testImplementation("com.github.spotbugs:spotbugs-annotations:${versions.spotbugs}")
  testImplementation("org.openstreetmap.josm:josm-unittest:"){changing=true}
  testImplementation("com.github.tomakehurst:wiremock:2.18.0")
}
task copyToLib(type: Sync) {
  from(configurations.packIntoJar)
  into(file("$projectDir/lib"))
}
classes.dependsOn(copyToLib)

test {
  useJUnitPlatform()
}

sourceSets {
  test {
    java {
      srcDirs = ["test/unit"]
    }
    resources {
      srcDirs = ["test/data"]
    }
  }
}
tasks.processResources {
  from("$projectDir/LICENSE")
  from("$projectDir/README.md")
}

archivesBaseName = "wikipedia"
josm {
  manifest {
    oldVersionDownloadLink 13597, "v1.0.1", new URL("https://github.com/JOSM/wikipedia/releases/download/v1.0.1/wikipedia.jar")
    oldVersionDownloadLink 12900, "34109", new URL("https://svn.openstreetmap.org/applications/editors/josm/dist/wikipedia.jar?p=34113")
    oldVersionDownloadLink 12878, "33635", new URL("https://svn.openstreetmap.org/applications/editors/josm/dist/wikipedia.jar?p=33636")
  }
  i18n {
    pathTransformer = getPathTransformer("github.com/JOSM/wikipedia/blob")
  }
}

// Set up ErrorProne
tasks.withType(JavaCompile) {
  options.compilerArgs += [
    "-Xep:DefaultCharset:ERROR",
    "-Xep:StringEquality:ERROR",
    "-Xep:ConstantField:WARN",
    "-Xep:LambdaFunctionalInterface:WARN",
    "-Xep:MethodCanBeStatic:WARN",
    "-Xep:MultiVariableDeclaration:WARN",
    "-Xep:PrivateConstructorForUtilityClass:WARN",
    "-Xep:RemoveUnusedImports:WARN",
    "-Xep:UngroupedOverloads:WARN",
    "-Xep:WildcardImport:WARN",
    "-Xlint:all",
    "-Xlint:-serial",
  ]
}

// Set up JaCoCo
jacoco {
  toolVersion = "${versions.jacoco}"
}
jacocoTestReport {
  dependsOn test
  reports {
    xml.enabled = true
    html.enabled = true
  }
}
check.dependsOn jacocoTestReport

// Set up PMD
pmd {
  toolVersion = versions.pmd
  ignoreFailures true
  ruleSets = []
  ruleSetConfig = resources.text.fromFile("$projectDir/config/pmd/ruleset.xml")
  sourceSets = [sourceSets.main]
}

// Set up SpotBugs
spotbugs {
  toolVersion = versions.spotbugs
  ignoreFailures = true
  sourceSets = [sourceSets.main]
}
tasks.withType(SpotBugsTask) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

task generateMasterPluginList(type: GeneratePluginList) {
  dependsOn(tasks.processResources)

  outputFile = new File(project.buildDir, "pluginMasterSnapshots")
  def defaultVersionSuffix = versionSuffix
  versionSuffix = {String s ->
    if (s.startsWith(archivesBaseName)) {
      return ""
    }
    return defaultVersionSuffix.invoke(s)
  }
  doFirst {
    def wikipediaURL = System.getenv("WIKIPEDIA_URL")
    def ptAssistantURL = System.getenv("PT_ASSISTANT_URL")
    if (wikipediaURL == null || ptAssistantURL == null) {
      throw new TaskExecutionException(it, new IllegalStateException("This tasks requires the environment variables `WIKIPEDIA_URL` and `PT_ASSISTANT_URL` to be set!"))
    }
    def circleBuildNum = System.getenv("CIRCLE_BUILD_NUM")
    if (wikipediaURL.count("%s") == 1 && circleBuildNum != null) {
      wikipediaURL = String.format(wikipediaURL, circleBuildNum)
    }

    it.iconBase64Provider = {
      def file = new File(sourceSets.main.resources.srcDirs[0], it)
      if (file.exists()) {
        def contentType = file.name.endsWith(".svg") ? "svg+xml" : "png"
        return "data:image/" + contentType + ";base64," + Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(file.toURI())));
      }
    }
    it.addPlugin("$archivesBaseName-dev.jar", project.josm.manifest.createJosmPluginJarManifest(), new URL(wikipediaURL))
    def manifestAttributes = new JarInputStream(new URL(ptAssistantURL).openConnection().inputStream).manifest.mainAttributes.entrySet().stream()
        .collect(Collectors.toMap({ e -> e.key.toString()}, { e -> e.value.toString()}))

    it.addPlugin("pt_assistant-dev.jar", manifestAttributes, new URL(ptAssistantURL))
  }
}

/**
 * @return the current version of the repo as determined by the first of these commands that returns a valid result:
 *   <ul>
 *     <li>`git log` Search for a line with a git-svn-id in the current commit (append "-dirty" if working tree differs)</li>
 *     <li>`git describe` Let git describe the current commit, should only fail, if this is not a git repo</li>
 *     <li>`svn info` take the revision number from the SVN info command</li>
 *   </ul>
 */
def getVersion() {
  // First attempt: Check if the commit has a git-svn-id, return SVN revision
  def result = getVersion("git-svn-id: .*@([1-9][0-9]*) .*", "git", "log", "-1", "--format=%b")
  if (result == null) {
    // Second attempt: Check if the commit can be git-described, return the description by git
    result = getVersion("(.+)", "git", "describe", "--always", "--dirty")
    if (result == null) {
      // Third attempt: Check if we are in an SVN repo, return revision number
      result = getVersion("Revision: ([1-9][0-9]*)", "svn", "info")
      if (result == null) {
        result = "UNKNOWN"
      } else {
        result = "r$result"
      }
    }
  } else {
    result = "r$result"
    def dirtyProcess = new ProcessBuilder("git", "diff-index", "--quiet", "HEAD").start()
    if (dirtyProcess.waitFor() != 0) {
      result += "-dirty"
    }
  }
  return result
}

/**
 * Runs the specified command, matches the lines of the output with the given linePattern.
 * @param linePattern the linePattern to match the lines against
 * @param command the command to execute
 * @return if a line matches, return the first RegEx group, else return null
 */
def getVersion(String linePattern, String... command) {
  def process = new ProcessBuilder(command).directory(project.projectDir).start()
  if (process.waitFor() != 0) {
    return null
  }
  def pattern = Pattern.compile(linePattern)
  return Arrays.stream(process.inputStream.text.split("\n"))
    .map { pattern.matcher(it)}
    .filter { it.matches() }
    .map { it.group(1).trim() }
    .findFirst()
    .orElse(null)
}

// Show task duration and skipped tasks
gradle.taskGraph.beforeTask {
  it.ext.startTime = Instant.now()
}
gradle.taskGraph.afterTask {
  if (!it.getState().skipped) {
    it.logger.lifecycle(String.format("\n  üèÅ Finished after %.3f seconds.", Duration.between(it.ext.startTime as Instant, Instant.now()).toMillis() / 1e3))
  }
}
gradle.buildFinished {
  def wereTasksSkipped = false
  tasks.forEach {
    if (it.state.skipped) {
      if (!wereTasksSkipped) {
        it.logger.lifecycle("\nSkipped tasks:")
        wereTasksSkipped = true
      }
      it.logger.lifecycle("‚è≠Ô∏è  :${it.name} (${it.state.skipMessage})")
    }
  }
}
