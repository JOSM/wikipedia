import java.nio.file.Files
import java.nio.file.Paths
import java.time.Duration
import java.time.Instant
import org.openstreetmap.josm.gradle.plugin.task.GeneratePluginList
import com.github.spotbugs.SpotBugsTask

plugins {
  id "java"
  id "eclipse"
  id "jacoco"
  id "pmd"
  id "com.github.ben-manes.versions" version "0.20.0"
  id "com.github.spotbugs" version "1.6.2"
  id "net.ltgt.errorprone" version "0.0.16"
  id "org.openstreetmap.josm" version "0.5.0"
}
def versions = [
    errorprone: "2.3.1",
    jacoco: "0.8.1",
    junit: "5.2.0",
    pmd: "6.6.0",
    spotbugs: "3.1.6",
]

repositories {
  jcenter()
}
dependencies {
  packIntoJar("com.fasterxml.jackson.core:jackson-databind:2.9.5")
  errorprone("com.google.errorprone:error_prone_core:${versions.errorprone}")
  testImplementation("org.junit.jupiter:junit-jupiter-api:${versions.junit}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${versions.junit}")
  testImplementation("org.junit.vintage:junit-vintage-engine:${versions.junit}")
  testImplementation("com.github.spotbugs:spotbugs-annotations:${versions.spotbugs}")
  testImplementation("org.openstreetmap.josm:josm-unittest:"){changing=true}
  testImplementation("com.github.tomakehurst:wiremock:2.18.0")
  testImplementation("org.awaitility:awaitility:3.1.2")
}
task copyToLib(type: Sync) {
  from(configurations.packIntoJar)
  into(file("$projectDir/lib"))
}
classes.dependsOn(copyToLib)

test {
  useJUnitPlatform()
  testLogging.exceptionFormat = 'full'
}

sourceSets {
  test {
    java {
      srcDirs = ["test/unit"]
    }
    resources {
      srcDirs = ["test/data"]
    }
  }
}
tasks.processResources {
  from("$projectDir/LICENSE")
  from("$projectDir/README.md")
}

archivesBaseName = "wikipedia"
josm {
  manifest {
    oldVersionDownloadLink 13597, "v1.0.1", new URL("https://github.com/JOSM/wikipedia/releases/download/v1.0.1/wikipedia.jar")
    oldVersionDownloadLink 12900, "34109", new URL("https://svn.openstreetmap.org/applications/editors/josm/dist/wikipedia.jar?p=34113")
    oldVersionDownloadLink 12878, "33635", new URL("https://svn.openstreetmap.org/applications/editors/josm/dist/wikipedia.jar?p=33636")
  }
  i18n {
    pathTransformer = getPathTransformer("gitlab.com/JOSM/wikipedia/blob")
  }
}

// Set up ErrorProne
tasks.withType(JavaCompile) {
  options.compilerArgs += [
    "-Xep:DefaultCharset:ERROR",
    "-Xep:StringEquality:ERROR",
    "-Xep:ConstantField:WARN",
    "-Xep:FieldCanBeFinal:WARN",
    "-Xep:LambdaFunctionalInterface:WARN",
    "-Xep:MethodCanBeStatic:WARN",
    "-Xep:MultiVariableDeclaration:WARN",
    "-Xep:PrivateConstructorForUtilityClass:WARN",
    "-Xep:RemoveUnusedImports:WARN",
    "-Xep:UngroupedOverloads:WARN",
    "-Xep:WildcardImport:WARN",
    "-Xlint:all",
    "-Xlint:-serial",
  ]
}

// Set up JaCoCo
jacoco {
  toolVersion = "${versions.jacoco}"
}
jacocoTestReport {
  dependsOn test
  reports {
    xml.enabled = true
    html.enabled = true
  }
}
check.dependsOn jacocoTestReport

// Set up PMD
pmd {
  toolVersion = versions.pmd
  ignoreFailures true
  ruleSets = []
  ruleSetConfig = resources.text.fromFile("$projectDir/config/pmd/ruleset.xml")
  sourceSets = [sourceSets.main]
}

// Set up SpotBugs
spotbugs {
  toolVersion = versions.spotbugs
  ignoreFailures = true
  sourceSets = [sourceSets.main]
}
tasks.withType(SpotBugsTask) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}

task generateSnapshotUpdateSite(type: GeneratePluginList) {
  dependsOn(tasks.processResources)

  outputFile = new File(project.buildDir, "snapshot-update-site")
  versionSuffix = {a -> ""}
  doFirst {
    def pluginDownloadUrl = "https://josm.gitlab.io/$archivesBaseName/snapshot/master/${archivesBaseName}.jar"
    it.iconBase64Provider = {
      def file = new File(sourceSets.main.resources.srcDirs[0], it)
      if (file.exists()) {
        def contentType = file.name.endsWith(".svg") ? "svg+xml" : "png"
        return "data:image/" + contentType + ";base64," + Base64.getEncoder().encodeToString(Files.readAllBytes(Paths.get(file.toURI())));
      }
    }
    it.addPlugin("$archivesBaseName-dev.jar", project.josm.manifest.createJosmPluginJarManifest(), new URL(pluginDownloadUrl))
  }
}

// Show task duration and skipped tasks
gradle.taskGraph.beforeTask {
  it.ext.startTime = Instant.now()
}
gradle.taskGraph.afterTask {
  if (!it.getState().skipped) {
    it.logger.lifecycle(String.format("\n  üèÅ Finished after %.3f seconds.", Duration.between(it.ext.startTime as Instant, Instant.now()).toMillis() / 1e3))
  }
}
gradle.buildFinished {
  def wereTasksSkipped = false
  tasks.forEach {
    if (it.state.skipped) {
      if (!wereTasksSkipped) {
        it.logger.lifecycle("\nSkipped tasks:")
        wereTasksSkipped = true
      }
      it.logger.lifecycle("‚è≠Ô∏è  :${it.name} (${it.state.skipMessage})")
    }
  }
}
