import com.github.spotbugs.snom.SpotBugsTask
import net.ltgt.gradle.errorprone.CheckSeverity

plugins {
  id "java"
  id "eclipse"
  id "jacoco"
  id "maven-publish"
  id "pmd"
  id("com.github.ben-manes.versions").version("0.28.0")
  id("com.github.spotbugs").version("4.2.0")
  id("org.openstreetmap.josm").version("0.7.0")
  id "net.ltgt.errorprone" version "1.1.1"
}

// Set up Errorprone
tasks.withType(JavaCompile).configureEach {
  options.errorprone {
    check("DefaultCharset", CheckSeverity.ERROR)
    check("StringEquality", CheckSeverity.ERROR)
    check("ConstantField",  CheckSeverity.WARN)
    check("FieldCanBeFinal", CheckSeverity.WARN)
    check("LambdaFunctionalInterface", CheckSeverity.WARN)
    check("MethodCanBeStatic", CheckSeverity.WARN)
    check("MultiVariableDeclaration", CheckSeverity.WARN)
    check("PrivateConstructorForUtilityClass", CheckSeverity.WARN)
    check("UngroupedOverloads", CheckSeverity.WARN)
    check("WildcardImport", CheckSeverity.WARN)
  }
}

java.sourceCompatibility = JavaVersion.VERSION_1_8

def versions = [
  errorprone: "2.3.4",
  jacoco: "0.8.5",
  junit: "5.6.2",
  pmd: "6.19.0",
  spotbugs: "4.0.3",
]

repositories {
  jcenter()
}
dependencies {
  if (!JavaVersion.current().isJava9Compatible()) {
    errorproneJavac("com.google.errorprone:javac:9+181-r4173-1")
  }
  errorprone("com.google.errorprone:error_prone_core:${versions.errorprone}")

  testImplementation("org.junit.jupiter:junit-jupiter-api:${versions.junit}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${versions.junit}")
  testImplementation("org.junit.vintage:junit-vintage-engine:${versions.junit}")
  testImplementation("com.github.spotbugs:spotbugs-annotations:${versions.spotbugs}")
  testImplementation("org.openstreetmap.josm:josm-unittest:"){changing=true}
  testImplementation("com.github.tomakehurst:wiremock-jre8:2.26.3")
  testImplementation("org.awaitility:awaitility:4.0.2")
}

dependencyUpdates.rejectVersionIf { version ->
  !["release", "final", "ga"].any { version.candidate.version.toLowerCase().contains(it) } && !(version.candidate.version ==~ /^[0-9,.v-]+(-r)?$/)
}

// Add dependencies from ivy.xml
def ivyModule = new XmlParser().parse(new File("$projectDir/ivy.xml"))
logger.info("Dependencies from ivy.xml (added to configuration `packIntoJar`):")
ivyModule.dependencies.dependency.each {
  logger.info("  * ${it.@org}:${it.@name}:${it.@rev}")
  project.dependencies.packIntoJar("${it.@org}:${it.@name}:${it.@rev}")
}

test {
  useJUnitPlatform()
  testLogging.exceptionFormat = 'full'
}

sourceSets {
  test {
    java {
      srcDirs = ["test/unit"]
    }
    resources {
      srcDirs = ["test/data"]
    }
  }
}
tasks.processResources {
  from("$projectDir/LICENSE")
  from("$projectDir/README.md")
}

archivesBaseName = "wikipedia"
josm {
  manifest {
    oldVersionDownloadLink 14149, "v1.1.3", new URL("https://josm.gitlab.io/plugin/wikipedia/dist/v1.1.3/wikipedia.jar")
    oldVersionDownloadLink 13927, "v1.1.0", new URL("https://josm.gitlab.io/plugin/wikipedia/dist/v1.1.0/wikipedia.jar")
    oldVersionDownloadLink 13597, "v1.0.1", new URL("https://github.com/JOSM/wikipedia/releases/download/v1.0.1/wikipedia.jar")
    oldVersionDownloadLink 12900, "34109", new URL("https://svn.openstreetmap.org/applications/editors/josm/dist/wikipedia.jar?p=34113")
    oldVersionDownloadLink 12878, "33635", new URL("https://svn.openstreetmap.org/applications/editors/josm/dist/wikipedia.jar?p=33636")
  }
  i18n {
    pathTransformer = getPathTransformer("gitlab.com/JOSM/plugin/wikipedia/blob")
  }
}

tasks.withType(JavaCompile) {
  options.compilerArgs += [
    "-Xlint:all",
    "-Xlint:-serial",
  ]
}

// Set up JaCoCo
jacoco {
  toolVersion = "${versions.jacoco}"
}
jacocoTestReport {
  dependsOn test
  reports {
    xml.enabled = true
    html.enabled = true
  }
}
check.dependsOn jacocoTestReport

// Set up PMD
pmd {
  toolVersion = versions.pmd
  ignoreFailures true
  ruleSets = []
  ruleSetConfig = resources.text.fromFile("$projectDir/config/pmd/ruleset.xml")
  sourceSets = [sourceSets.main]
}

// Set up SpotBugs
spotbugs {
  toolVersion.set(versions.spotbugs)
  ignoreFailures.set(true)
}
tasks.withType(SpotBugsTask) {
  reports {
    html.enabled = true
  }
}
